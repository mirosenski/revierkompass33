import { createFileRoute } from "@tanstack/react-router";
import { useState } from "react";
import { getOptimalRoute, type LatLng } from "@/services/routing";

function TestRoutingComponent() {
  const [result, setResult] = useState<any>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const testCoordinates = {
    stuttgart: { lat: 48.7758, lng: 9.1829 },
    karlsruhe: { lat: 49.0069, lng: 8.4037 },
  };

  const testRoute = async () => {
    setLoading(true);
    setError(null);
    setResult(null);

    try {
      console.log("🚀 Testing routing with coordinates:", testCoordinates);
      
      const startTime = performance.now();
      const route = await getOptimalRoute(testCoordinates.stuttgart, testCoordinates.karlsruhe);
      const endTime = performance.now();
      
      const duration = endTime - startTime;
      
      console.log("✅ Route calculated:", route);
      console.log(`⏱️  Response time: ${duration.toFixed(2)}ms`);
      
      setResult({
        ...route,
        responseTime: duration,
        distanceKm: (route.distance / 1000).toFixed(1),
        durationMin: Math.round(route.duration / 60),
      });
    } catch (err) {
      console.error("❌ Routing error:", err);
      setError(err instanceof Error ? err.message : "Unknown error");
    } finally {
      setLoading(false);
    }
  };

  const testCache = async () => {
    if (!result) return;
    
    setLoading(true);
    setError(null);
    
    try {
      console.log("🔄 Testing cache with same coordinates...");
      
      const startTime = performance.now();
      const cachedRoute = await getOptimalRoute(testCoordinates.stuttgart, testCoordinates.karlsruhe);
      const endTime = performance.now();
      
      const duration = endTime - startTime;
      
      console.log("✅ Cached route:", cachedRoute);
      console.log(`⏱️  Cache response time: ${duration.toFixed(2)}ms`);
      
      setResult({
        ...cachedRoute,
        responseTime: duration,
        distanceKm: (cachedRoute.distance / 1000).toFixed(1),
        durationMin: Math.round(cachedRoute.duration / 60),
        fromCache: duration < 400, // Assume cache hit if < 400ms
      });
    } catch (err) {
      console.error("❌ Cache test error:", err);
      setError(err instanceof Error ? err.message : "Unknown error");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-2xl mx-auto p-6">
      <h1 className="text-3xl font-bold mb-6">🧪 Routing Service Test</h1>
      
      <div className="space-y-4 mb-6">
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <h2 className="font-semibold text-blue-800 mb-2">Test Coordinates</h2>
          <div className="text-sm text-blue-600">
            <div><strong>Start:</strong> Stuttgart (48.7758, 9.1829)</div>
            <div><strong>Ziel:</strong> Karlsruhe (49.0069, 8.4037)</div>
            <div><strong>Erwartet:</strong> ~80 km / ~60 min</div>
          </div>
        </div>
        
        <div className="flex space-x-4">
          <button
            onClick={testRoute}
            disabled={loading}
            className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50"
          >
            {loading ? "🔄 Berechne Route..." : "🚀 Route berechnen"}
          </button>
          
          {result && (
            <button
              onClick={testCache}
              disabled={loading}
              className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 disabled:opacity-50"
            >
              {loading ? "🔄 Teste Cache..." : "💾 Cache testen"}
            </button>
          )}
        </div>
      </div>

      {error && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
          <h3 className="font-semibold text-red-800 mb-2">❌ Fehler</h3>
          <p className="text-red-600">{error}</p>
        </div>
      )}

      {result && (
        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
          <h3 className="font-semibold text-green-800 mb-2">✅ Ergebnis</h3>
          <div className="space-y-2 text-sm">
            <div><strong>Entfernung:</strong> {result.distanceKm} km</div>
            <div><strong>Dauer:</strong> {result.durationMin} Minuten</div>
            <div><strong>Antwortzeit:</strong> {result.responseTime.toFixed(2)}ms</div>
            {result.fromCache && <div className="text-green-600">💾 Aus Cache geladen</div>}
            <div><strong>Koordinaten:</strong> {result.geometry.coordinates.length} Punkte</div>
          </div>
        </div>
      )}

      <div className="mt-6 text-sm text-gray-600">
        <h4 className="font-semibold mb-2">📋 Checkliste:</h4>
        <ul className="space-y-1">
          <li>✅ Route berechnet (~80 km / ~60 min)</li>
          <li>✅ Antwortzeit ≤ 1 Sekunde</li>
          <li>✅ Cache-Hit ≤ 400ms (zweiter Aufruf)</li>
          <li>⬜ Offline-Mode funktioniert</li>
          <li>⬜ Network-Tab zeigt OSRM-Request</li>
        </ul>
      </div>
    </div>
  );
}

export const Route = createFileRoute("/test-routing")({
  component: TestRoutingComponent,
}); 